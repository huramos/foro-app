syntax = "proto3";
option java_package = "com.sonarsource.architecture.udg.protobuf";
option csharp_namespace = "SonarAnalyzer.Udg.Protobuf";
option java_multiple_files = true;
option optimize_for = SPEED;

import "file.proto";
import "property.proto";
import "attribute.proto";
import "container.proto";
import "item.proto";
import "dependency.proto";

/**
 * Universal Dependency Graph (UDG) - represents the language agnostic dependency graph of a project.
 * These graphs are generated by language specific architecture analyzer frontends.
 */
message Udg {
    /**
     * UDG data format version.
     */
    string version = 1;

    /**
     * UDG data name, e.g., name of the analyzed project.
     */
    string name = 2;

    /**
     * UDG data generator name, such as `sonar-architecture-java-frontend-plugin` or `sonar-architecture-python-frontend-plugin`
     */
    string created_by = 3;

    /**
     * UDG data generation data.
     */
    string created_when = 4;

    /**
     * UDG data language identifier, such as `java`, `python` or `csharp`.
     */
    string language = 5;

    /**
     * Separator between name segments in qualifiers, such as `.` for Java or `::` for C#.
     */
    string name_separator = 6;

    /**
     * Additional properties attached by the generator.
     */
    optional Properties properties = 7;

    /**
     * Lookup table for string compression: string to string ID.
     */
    optional Attributes attributes = 8; // cache of commonly used strings across files, namespaces and types

    /**
     * All source code files that are part of the the project.
     */
    optional Files files = 9; // all files parsed

    /**
     * All dependencies from files, e.g., `.cpp`, `.java`, `.h`, to files, containers or items in this dependency graph.
     */
    optional Dependencies file_dependencies = 10; // file to file/ns/type dependencies

    /**
     * All containers in this dependency graph, including external containers that are not declared in the project.
     */
    optional Containers containers = 11; // all my namespaces

    /**
     * All dependencies from containers, e.g., namespaces, packages or modules, to files, containers or items in this dependency graph.
     */
    optional Dependencies container_dependencies = 12; // namespace to file/ns/type dependencies

    /**
     * All items in this dependency graph, including external items that are not declared in the project.
     */
    optional Items items = 13;

    /**
     * All dependencies from items, e.g., classes, fields or functions, to files, containers or items in this dependency graph.
     */
    optional Dependencies item_dependencies = 14; // type to file/ns/type dependencies
}
